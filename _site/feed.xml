<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
	<channel>
		<title>Pebbles Games</title>
		<description>Pebbles Games is a new indie game studio based out of Toronto, ON. We are currently in the midst of creating our first unnamed creation, but you can follow our progress (and rants) by checking out our blog.</description>		
		<link>http://pebblesgames.com</link>
		<atom:link href="http://pebblesgames.com/feed.xml" rel="self" type="application/rss+xml" />
		
			<item>
				<title>The importance of a well-imagined narrator</title>
				<description>&lt;p class=&quot;p-end&quot;&gt;
  	So there&#39;s been a recent trend of live narration in video games and I have to say that I&#39;m a big fan. The two most obvious examples to me would be &lt;a target=&quot;_blank&quot; href=&quot;https://www.supergiantgames.com/games/bastion/&quot;&gt;Bastion&lt;/a&gt; and &lt;a target=&quot;_blank&quot; href=&quot;http://www.stanleyparable.com/&quot;&gt;The Stanley Parable&lt;/a&gt;. By including a narrator to direct the storyline of your game, you can eliminate the need of interrupting gameplay in order to tell a story. I&#39;ve said before in my blog posts that I&#39;m not a big fan of intrusive story segments (&lt;a target=&quot;_blank&quot; href=&quot;http://mgsforums.com/topic/7644188/1/&quot;&gt;Metal Gear Solid&lt;/a&gt;, I&#39;m looking at you) and I have a large interest in developing games that tell a story without disrupting gameplay. So obviously, I decided that I should follow suit and put my own spin on the idea of a live narrative.
  	&lt;br&gt;&lt;br&gt;
  	Yah... I quickly learned that some of the intricacies of creating a narrator can go over the head of someone who has never thought about the finer details before. To design a game where each artistic aspect reinforces each other, deciding the character of the narrator first is key. The narrator has to not only mesh well with the music, but also the art design and gameplay as well. Imagine playing Sonic with the narrator from Bastion, doesn&#39;t exactly sync well together do they? That doesn&#39;t even take into account the possibility of the narrator having some sort of impact on the storyline itself. In The Stanley Parable, the narrator is somewhat disconnected from the story itself as he speaks as more of a godlike figure. Compare that to Bastion, where &lt;b&gt;(minor spoiler alert)&lt;/b&gt; the narrator is one of the few characters in the game, Rucks. He obviously has a personality and his narration comes from his perspective of the situation.
&lt;/p&gt;

&lt;div class=&quot;post-image p-end&quot;&gt;
	&lt;img src=&quot;http://pebblesgames.com/img/morgan-freeman.jpg&quot; alt=&quot;Shawshank Redemption - Morgan Freeman&quot; /&gt;
	&lt;p&gt;A good narrator can make or break a movie. Morgan Freeman is popular for obvious reasons.&lt;/p&gt;
&lt;/div&gt;

&lt;p class=&quot;p-end&quot;&gt;
  	One key thing that I noticed from playing Bastion was that despite the fact that the narrator clearly had his own personality, his character had little weight on the plot and he could have easily been swapped out with a different character. While I don&#39;t think this is a big deal, I do think that having a narrator can be used in more extensive and thought-provoking ways. Throughout Bastion we get a decent idea of what the character of the narrator is, without dwelling too much on his personality and his motives. The focus of the story is still on the main character, the Kid, and the desolite world that they live in.
  	&lt;br&gt;&lt;br&gt;
  	So what if we put a large focus of the story on the actual character of the narrator himself? One of the most complex things about creating stories is the motives and personalities of the characters. Anyone can design an outline for an interesting story, hell I&#39;m sure most people probably made a few back in kindergarten. Creating interesting, believable and relatable characters that drive the story is the hard part. By using a narrator we have the ability to fully explore and develop a single character. Even if in comparison the other characters in the game are bland, we can take a very in-depth look at that single individual. If we set it up so that one person is the driving force behind the plot of the game, we can ignore the fact that the other characters aren&#39;t as fleshed out. Developing a story focused around a single character is difficult but not impossible, just look at &lt;a target=&quot;_blank&quot; href=&quot;http://www.imdb.com/title/tt0162222/&quot;&gt;Cast Away&lt;/a&gt; or &lt;a target=&quot;_blank&quot; href=&quot;http://www.imdb.com/title/tt0480249/&quot;&gt;I Am Legend&lt;/a&gt;.
&lt;/p&gt;

&lt;div class=&quot;post-image p-end&quot;&gt;
	&lt;img src=&quot;http://pebblesgames.com/img/wilson.gif&quot; alt=&quot;Cast Away Wilson&quot; /&gt;
	&lt;p&gt;Best supporting actor.&lt;/p&gt;
&lt;/div&gt;

&lt;p class=&quot;p-end&quot;&gt;
  	But now here comes the hard part. To construct a storyline that is so heavily dependant on a single character, you have to plan ahead, a lot. You need to know exactly why this character is the way that they are, they need to have a obvious motive behind everything that they do. If you focus heavily on a single character, people will notice any sort of flaw that exists in that character if you screw up. This can cause a significant amount of overhead when creating a game because whereas some games might have a storyline that evolves during development, in this case the narrator&#39;s personality will need to be clearly defined to start. If the character of the narrator starts changing during development, a lot of additional work will need to be redone to make sure the narration is consistent throughout the game. Also mix that with the fact that the narrator should match the gameplay/art/music to get the most out of the experience, you may end up getting yourself in some tricky situations as a designer.
  	&lt;br&gt;&lt;br&gt;
  	Once it works though, it is incomparable. There aren&#39;t really any games that can match the storytime atmosphere given off by Bastion, or the somewhat peaceful but still uneasy narration delivered in The Stanley Parable. It gives your game a very specific type of attitude which can&#39;t easily be recreated or copied. While I would love to show off what kind of narrative we have in progress, at this point it would only take away from the final product. We&#39;re still too busy finalizing the personality of our narrator, so I wouldn&#39;t want to jump the gun. Let&#39;s just say that 2015 will be a very progressive year for our development and I can&#39;t wait to see the way things turn out.
&lt;/p&gt;
</description>
				<pubDate>Fri, 21 Nov 2014 00:00:00 -0600</pubDate>
				<link>http://pebblesgames.com/game/2014/11/21/the-importance-of-a-good-narrator.html</link>
				<guid isPermaLink="true">http://pebblesgames.com/game/2014/11/21/the-importance-of-a-good-narrator.html</guid>
			</item>
		
			<item>
				<title>Designing a simple but modular engine</title>
				<description>&lt;p class=&quot;p-end&quot;&gt;
	So I had the unfortunate opportunity to learn about &lt;a target=&quot;_blank&quot; href=&quot;http://en.wikipedia.org/wiki/Entity_component_system&quot;&gt;component-driven development&lt;/a&gt; during a job interview for a potential internship at a mobile games studio. Despite the fact that I was geniunely interested in learning more about it and that I hoped to teach myself prior to starting the job, I don&#39;t think they were too interested in a student who knew nothing about the topic. Let&#39;s just say I didn&#39;t get that internship.
	&lt;br&gt;&lt;br&gt;
	It&#39;s been a couple years since that interview and I like to think I&#39;m at least slightly more knowledgeable about certain design patterns. So when it came time to finally design the engine which I was going to use for my first marketable game, I immediately decided that I should focus on designing it as an entity-component system. The decision was pretty easy considering how well Unity pushes the design pattern via the &lt;a target=&quot;_blank&quot; href=&quot;http://docs.unity3d.com/Manual/Inspector.html&quot;&gt;Inspector&lt;/a&gt;. My main goal though, even more so then using components, was to design an engine which I could add and edit with little development overhead. I wanted to simplify the process of creating new objects to the point where it would take me virtually no time to create something like a new enemy.
	&lt;br&gt;&lt;br&gt;
	For this post, I&#39;ll give a high level overview of how I designed the engine to be easily modifiable and expandable. In a later post (don&#39;t know how long from now) I&#39;ll go more in depth with certain aspects of the code and how it all works together. If you have any specific questions, feel free to ask in the comments. If the question is simple I may just answer it there, but if it is more long-winded I&#39;ll probably include it in the sequel to this blog post.
&lt;/p&gt;

&lt;hr class=&quot;grey&quot;&gt;

&lt;p&gt;
  Since this wasn&#39;t my first attempt at designing a component based engine, I already knew one issue that I wanted to avoid, the overuse of components. Components are super helpful and great for abstracting out a specific mechanic or piece of code; but, they are only as useful as you make them. Just like anything else in development, they are a tool which can help or hinder you depending on how you use them. There&#39;s no point creating a design where each object is required to have 10 components, and while that is a gross oversimplification, overengineering can lead to some serious headaches down the road. Considering I&#39;m only creating a 2D engine, I don&#39;t need an excessive amount of components per object.
  &lt;br&gt;&lt;br&gt;
  So let&#39;s break down a basic enemy object into potential components, I&#39;ll use the example of a Goomba since it&#39;s easy to understand and most 2D platformers have their own example of an enemy with a similar movement pattern. The most basic requirements for a Goomba object can be broken down into a few components:
&lt;/p&gt;

&lt;div class=&quot;row p-end&quot;&gt;
  &lt;div class=&quot;col-md-3 col-xs-6 p-end&quot;&gt;
    &lt;div class=&quot;post-image&quot; style=&quot;width: 100%;&quot;&gt;
      &lt;img src=&quot;http://pebblesgames.com/img/goomba-base.png&quot; alt=&quot;Goomba (x, y) coordinates&quot; /&gt;
      &lt;p&gt;(X, Y) position in a 2D space&lt;/p&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;div class=&quot;col-md-3 col-xs-6 p-end&quot;&gt;
    &lt;div class=&quot;post-image&quot; style=&quot;width: 100%;&quot;&gt;
      &lt;img src=&quot;http://pebblesgames.com/img/goomba-physics.png&quot; alt=&quot;Goomba physics&quot; /&gt;
      &lt;p&gt;Horizontal/Vertical speed and gravity&lt;/p&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;div class=&quot;col-md-3 col-xs-6 p-end&quot;&gt;
    &lt;div class=&quot;post-image&quot; style=&quot;width: 100%;&quot;&gt;
      &lt;img src=&quot;http://pebblesgames.com/img/goomba-collision.png&quot; alt=&quot;Goomba collision with mario&quot; /&gt;
      &lt;p&gt;Collision event handling&lt;/p&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;div class=&quot;col-md-3 col-xs-6 p-end&quot;&gt;
    &lt;div class=&quot;post-image&quot; style=&quot;width: 100%;&quot;&gt;
      &lt;img src=&quot;http://pebblesgames.com/img/goomba-sprite.png&quot; alt=&quot;Goomba walk animation&quot; /&gt;
      &lt;p&gt;Sprite updates and animation&lt;/p&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;
  
&lt;p class=&quot;p-end&quot;&gt;
  While some might argue that you could break it down into even more components, I like to believe in the KISS principle (aka, Keep It Simple Stupid). It&#39;s better to nail the fundamentals first before adding all the fancy trim so let&#39;s do just that. Out of the possible components I outlined above, we can start to predict what will be the basic structure of an object in our engine. Obviously the most important part of all the components is the position of the object, as speed/collisions/rendering are all dependant on the coordinates in a 2D space.
  &lt;br&gt;&lt;br&gt;
  I decided to call the component which handles this most basic functionality the BaseObject, as all the other components are supplementary to it. I would normally call this the GameObject, but Unity already &lt;a target=&quot;_blank&quot; href=&quot;http://docs.unity3d.com/ScriptReference/GameObject.html&quot;&gt;uses that name heavily&lt;/a&gt; and I don&#39;t want to fight against Unity THAT much. Let&#39;s give names to the remaining components as well to make this a bit easier to follow. The component which handles the horizontal/vertical speed and gravity will be called the PhysicsObject, the component which handles the collision event handling will be called the CollisionObject and the component which handles the changes in animation and/or sprite will be called the SpriteObject.
  &lt;br&gt;&lt;br&gt;
  Now looking at these other non-BaseObject components, none of them are really required for a typical object. Not every object will need a PhysicsObject (stationary objects), not every object will need a CollisionObject (non-interactive objects) and not every object will need a SpriteObject (static sprites with no animations). BaseObject on the other hand is required, so let&#39;s build these three components to be optional extensions to the BaseObject component.
&lt;/p&gt;

&lt;div class=&quot;post-image p-end medium&quot;&gt;
	&lt;img src=&quot;http://pebblesgames.com/img/base-object-diagram.png&quot; alt=&quot;Collision object example&quot; /&gt;
&lt;/div&gt;

&lt;p class=&quot;p-end&quot;&gt;
  By structuring our model like this, we use BaseObject as a single point of reference for all of the additional components on the object. While the Update function is called for each component by Unity, we can instead have the BaseObject handle the updating of the other components instead, forcing Update to be called only once for the whole GameObject. Necessary? No. Clean? Yes.
&lt;/p&gt;

&lt;hr class=&quot;grey&quot;&gt;

&lt;p class=&quot;p-end&quot;&gt;
  So since I&#39;m just giving a quick overview in this post, I&#39;m going to avoid posting code or going too in depth with the functionality of each component. Instead I&#39;m going to focus on the design decisions made to allow quick changes to these components to streamline the development time.
  &lt;br&gt;&lt;br&gt;
  Let&#39;s start with the simplest case, the SpriteObject. This component doesn&#39;t need much more then basic functions to change the current sprite or animation time. In all honesty, I haven&#39;t gone into too much depth with this component myself yet as I&#39;ve had no need to. We&#39;re only using development art at this time, so I would be wasting valuable dev time by trying to expand it at this point. Once I figure out the type of assets that we&#39;ll be using, I&#39;ll start thinking on how to extend the design of this component.
  &lt;br&gt;&lt;br&gt;
  The PhysicsObject isn&#39;t exactly complex either, but it is important to have it easily modifiable. While each object tends to have it&#39;s own unique SpriteObject, the PhysicsObject doesn&#39;t require many variations. By using public fields for the force of gravity, acceleration, friction, horizontal speed, vertical speed and maximum velocity, it&#39;s easy to adjust the physics of the object directly in the &lt;a target=&quot;_blank&quot; href=&quot;http://docs.unity3d.com/Manual/Inspector.html&quot;&gt;Inspector&lt;/a&gt;. All the component is required to do is move the BaseObject via those values.
  &lt;br&gt;&lt;br&gt;
  The CollisionObject component on the other hand is an important one to design to be modular. Each object will likely have it&#39;s own variation of the component, so we want to minimalize the overhead of setting it up. The best way to do this is to design the class to use mock handler functions. If we design the base CollisionObject class to detect collisions and call a function stub based on the type of object collided with, classes that inherit from the class can simply override the stub to handle the collision. This logic is illustrated in the diagram below:
&lt;/p&gt;

&lt;div class=&quot;post-image p-end medium&quot;&gt;
	&lt;img src=&quot;http://pebblesgames.com/img/collision-object-diagram.png&quot; alt=&quot;Collision object example&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;
  This creates a desirable interface for handling collisions. Each object contains a script which inherits from the base CollisionObject class and defines the behaviour during different kinds of collisions. It doesn&#39;t get much more clean and simple then this, and it can take literally seconds to define the behaviour of a collision between two objects. Unlike the PhysicsObject the behaviour cannot be set in the Inspector, but handling collisions is fairly more complex than setting the speed of an object so this is to be expected.
  &lt;br&gt;&lt;br&gt;
  While unique functionality of each object must still be defined by the BaseObject, we were successfully able to abstract out the optional logic for physics, collisions and sprites into their own components. Also by having these optional components accessible via the BaseObject, it is easy to cross-reference them in scripts. While some people may have their own opinions on how they like to structure their engines, I tend to like to take the most simple approach as long as it is still efficient. By creating my own engine it becomes a lot easier to streamline my development to my own personal preferences, which to me is extremely important. I like development but I like design better, so the more time I can spend on designing my game instead of dabbling in code, the better.
&lt;/p&gt;</description>
				<pubDate>Thu, 13 Nov 2014 00:00:00 -0600</pubDate>
				<link>http://pebblesgames.com/game/2014/11/13/designing-a-modular-engine.html</link>
				<guid isPermaLink="true">http://pebblesgames.com/game/2014/11/13/designing-a-modular-engine.html</guid>
			</item>
		
			<item>
				<title>Exploring What Makes Games Unique</title>
				<description>&lt;p class=&quot;p-end&quot;&gt;
	So one of the major things that I wanted to focus on when I started designing games, was exploring what video games could become as an artistic medium. I know I&#39;m definitely not the first one to bring up this issue and I think I can assume that most, if not all, of the indie developer community already considers it an art. That being said, there are a large portion of people out there who either don&#39;t agree with us, or simply don&#39;t care. And to be honest, I&#39;m fine with that. As opposed to trying to convince them, I&#39;ll spend my time doing what I do best, and that&#39;s making games. You can&#39;t convince someone who isn&#39;t listening anyway, so to me, the only solution to this problem is time.
&lt;/p&gt;

&lt;div class=&quot;row p-end&quot;&gt;
  &lt;div class=&quot;col-xs-8&quot;&gt;
    &lt;p&gt;
    	So now that we&#39;re off that topic, let&#39;s start dissecting what actually makes video games different from any other artistic medium. Obviously one of the first things that comes to mind is the fact that video games are played. Video games take input, which can&#39;t be said of any other medium. Books must be read, movies must be watched, music must be heard, etc. As the only medium which can accept user input, this is the only medium where the story can be affected by the user (I&#39;m not counting Choose Your Own Adventure Books).
    	&lt;br&gt;&lt;br&gt;
    	Now many games have caught on to this already and realized that this allows for multiple scenarios within the same story. There are quite a few notable series of games that have already played with the concept of alternate storylines, and personally I don&#39;t have much interest in currently exploring that method of storytelling myself. So let&#39;s explore how else user input could add to the medium in an artistic sense.
    &lt;/p&gt;
  &lt;/div&gt;
  &lt;div class=&quot;col-xs-4&quot;&gt;
    &lt;div class=&quot;post-image&quot;&gt;
    	&lt;img src=&quot;http://pebblesgames.com/img/mass-effect.jpg&quot; alt=&quot;Mass Effect&quot; /&gt;
    	&lt;p&gt;Mass Effect is an excellent example of a game series where the storyline changes based on input from the user.&lt;/p&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;
	
&lt;p class=&quot;p-end&quot;&gt;
	A result of the story being affected by the user, is that the story now relies on the user for certain storyline events. They are given somewhat a sense of responsibility over the storyline, as opposed to just &#39;soaking it in&#39; like you would expect from other mediums. This sense of responsibility opens a whole new realm of possibility, not only in just storytelling methods, but also in the emotions felt by the player of the game. Let&#39;s take Pikmin for example.
	&lt;br&gt;&lt;br&gt;
	In Pikmin, the player must raise and protect their pikmin in order to progress. The player is given the responsibility of raising them and protecting them, but if they screw up it will cost the lives of their pikmin. While pikmin can be considered fairly expendable, the player does feel a sense of disappointment for letting them die. While some players may actually feel a sense of loss due to actual attachment to their cute little creatures, others may just feel disappointed because they know it will require them to harvest more pikmin.
	&lt;br&gt;&lt;br&gt;
	While the actual emotion felt is dependant on the player, the sense of loss exists for all players. This emotion could not exist without input from the player, as they were to blame for something going wrong in the story at all. Since units in Pikmin don&#39;t have much in the way of unique personalities, let&#39;s further explore this concept using Fire Emblem. While I&#39;ve never actually played a game in the series, I know that once you lose one of your allies in the game, they don&#39;t come back. This is a harsher version of it, but it is still the same sense of loss being felt by the player.
	&lt;br&gt;&lt;br&gt;
	Now notice how this specific emotion cannot be pulled from the user without input. This is an example of a feeling which is not possible to reproduce in any other medium. Yes, one could argue that they would feel loss by having a favorite character die in something like a movie or a book. While this is true, the scale of the feeling is incomparable. This is due to the fact that in games, the player feels direct responsibility, whereas in other mediums the player is following a set script.
	&lt;br&gt;&lt;br&gt;
	This brings me to my main point, one of the fundamentals of what makes games different from other artistic mediums: the idea that games allow us to explore the ability of &#39;I did this&#39; or &#39;We did this&#39; instead of &#39;They did this&#39;. When watching a movie, you can only see things get achieved by the characters on the screen. You have no personal sense of achievement, but you still enjoy seeing your favorite characters achieving their goals because you like them.
&lt;/p&gt;

&lt;div class=&quot;row p-end&quot;&gt;
  &lt;div class=&quot;col-xs-6&quot;&gt;
    &lt;div class=&quot;post-image small&quot;&gt;
    	&lt;img src=&quot;http://pebblesgames.com/img/arkham-city.jpg&quot; alt=&quot;Arkham City - Joker Punch&quot; /&gt;
    	&lt;p&gt;&#39;I did this&#39;&lt;/p&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;div class=&quot;col-xs-6&quot;&gt;
    &lt;div class=&quot;post-image small&quot;&gt;
    	&lt;img src=&quot;http://pebblesgames.com/img/batman-tv-show.png&quot; alt=&quot;Batman Animated Series - Joker Punch&quot; /&gt;
    	&lt;p&gt;&#39;He did this&#39;&lt;/p&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;
	
&lt;p&gt;
	With games, we instead get this sense of &#39;I did this&#39; or &#39;We did this&#39;, for solo and team based games respectively. Because we are given the ability to give input and affect the outcome as players, we also leave ourselves open to express a wider variety of feelings throughout our experience, such as the standard sense of achievement that most people feel when playing games. The examples I gave earlier of Pikmin and Fire Emblem showcase the inverse of this, a sense of &#39;I didn&#39;t do this&#39;, which in this case culminates in a sense of loss for the player. By playing around with how we use these mechanics, we are likely to uncover other ways in which to express emotion through the player, but that&#39;s all in due time.
	&lt;br&gt;&lt;br&gt;
	So we&#39;ve identified one attribute that makes game unique as an artistic medium, but that&#39;s definitely just scratching the surface. I think anyone reading this can agree that it will be years before people fully explore the intricacies behind the art of game design. That being said, we&#39;ve got to start somewhere don&#39;t we? I want to see this medium grow as well as mature, so I think it&#39;s important that we begin to focus on the things that make us unique and different first, so we can expand on those ideas in the future.
&lt;/p&gt;
</description>
				<pubDate>Sat, 08 Nov 2014 00:00:00 -0600</pubDate>
				<link>http://pebblesgames.com/game/2014/11/08/exploring-games-as-art.html</link>
				<guid isPermaLink="true">http://pebblesgames.com/game/2014/11/08/exploring-games-as-art.html</guid>
			</item>
		
			<item>
				<title>It&#39;s been too long</title>
				<description>&lt;p class=&quot;p-end&quot;&gt;
	5 years. That&#39;s how much time has passed since I last created a level in a full-length game. And honestly, I somehow managed to forget how much I flat-out enjoyed it. Doesn&#39;t everyone have that one activity which they enjoy doing more then they probably should? Mine just happens to be level design, a fact that I&#39;ve struggled to remember over the last few years.
	&lt;br&gt;&lt;br&gt;
	Actually, it may not be so much that I forgot about it, but more that a series of events drove me away from it over the last few years. Up until this point, I was honestly putting off the development of the first level in our game. I don&#39;t know why, except somehow I ended up with the idea in my mind that it was going to be incredibly tedious. Having put in a fair amount of time into the creation of the level now, I would consider it anything but.
	&lt;br&gt;&lt;br&gt;
	So I started thinking back to my previous games to try and remember why I had such a low interest in level design recently. I clearly remembered it being my favorite part of creating my previous games, so when did I give it the chance to rub me the wrong way? The answer became pretty obvious when I realized the last time I worked on a major project, the infamous final 10% of my largest project ever. Play-testing, cleaning up levels, fixing bugs, adding scenery, minor tweaks and improvements; all things that I considered extremely tedious at the time despite being very important. That was it, completing my previous game had made me decide to take a break; but, it wasn&#39;t just that. I didn&#39;t get to do very much level design in that last 10% either. All I could remember when I finished, was all the grinding that I had to do at the end of the game, as opposed to the fun parts I got to do throughout.
&lt;/p&gt;

&lt;div class=&quot;post-image p-end&quot;&gt;
	&lt;img src=&quot;http://pebblesgames.com/img/dkc-screenshot.bmp&quot; alt=&quot;Donkey Kong Country 4 - The DK Bay&quot; /&gt;
	&lt;p&gt;
	  30 long levels, 7 bosses, 60 hidden bonus coins and a bonus world.&lt;br&gt;
	  Pretty ambitious for a kid who didn&#39;t know how to write a function.
	&lt;/p&gt;
&lt;/div&gt;

&lt;p class=&quot;p-end&quot;&gt;
	But let&#39;s backtrack a little more first because I can&#39;t fully place the blame on that last 10%. I have a very bad habit of wanting all of the art and music for a level before actually developing it (let&#39;s say for inspiration purposes). Now when I was creating fan-games with Game Maker, this wasn&#39;t a huge issue. I just hit up &lt;a target=&quot;_blank&quot; href=&quot;http://vgmusic.com&quot;&gt;VG Music&lt;/a&gt; to get the music, and &lt;a target=&quot;_blank&quot; href=&quot;http://spriters-resource.com&quot;&gt;Spriters Resource&lt;/a&gt; to get the art. Now that only got me so far, but &lt;a target=&quot;_blank&quot; href=&quot;http://www.dkc-atlas.com/forum/viewtopic.php?f=26&amp;t=972&amp;sid=595f4b5ab5ca0be0ca0088f148907293&quot;&gt;thanks to the help of awesome strangers on the internet&lt;/a&gt;, I managed to put together my assets piece by piece. Matching tilesets and backgrounds were a bit harder to come by though, and I probably wasted hours upon hours looking for good artwork for my game. This increased my development time by ridiculous amounts and to put it simply, it was tedious.
	&lt;br&gt;&lt;br&gt;
	This focus of developing levels with the proper graphics first slowed my development to a crawl, unfortunately I didn&#39;t notice that until pretty much just now. And the only reason I noticed was because I found myself making the exact same mistakes and doing the exact same things all over again this time around. Initially I was trying to make this game by myself, artwork and everything. It wasn&#39;t until Jason came on board and made me realize that what I was doing wasn&#39;t necessary or smart. It was time for me to ditch my ego and, instead of trying to do it all myself, leave the art to a professional. This is easily the smartest decision I could have made as it allows me to focus on the things I actually excel at, development and level design. The best part is, I can already notice it making an improvement.
	&lt;br&gt;&lt;br&gt;
	I always considered game development something that I could do on my own, but realistically it shouldn&#39;t be. I&#39;ll be able to make a better quality game by learning to properly use my team&#39;s strengths instead. A one man show is really convenient at first, until you realize how much time you&#39;re wasting by doing it.
	&lt;br&gt;&lt;br&gt;
	&lt;i class=&quot;post-note&quot;&gt;Shout-outs to aperson98 and NecroToad from &lt;a target=&quot;_blank&quot; href=&quot;http://www.dkc-atlas.com/&quot;&gt;DKC Atlas&lt;/a&gt;. The DK Bay wouldn&#39;t have been the same without your help :)&lt;/i&gt;
&lt;/p&gt;
</description>
				<pubDate>Thu, 06 Nov 2014 00:00:00 -0600</pubDate>
				<link>http://pebblesgames.com/game/2014/11/06/its-been-too-long.html</link>
				<guid isPermaLink="true">http://pebblesgames.com/game/2014/11/06/its-been-too-long.html</guid>
			</item>
		
			<item>
				<title>Fighting the system</title>
				<description>&lt;p class=&quot;p-end&quot;&gt;
  	So for whatever reason I decided to use Unity for my 2D sidescroller. I&#39;m at the point now where I don&#39;t at all regret this decision, but thats because I&#39;m not really using Unity the way it&#39;s built for. I was given a development application which handled all of the basic engine fundamentals like frame updates, rendering and physics. The only problem was that I didn&#39;t care about having any of that stuff. I&#39;ve built my own game and physics engines for years and I wanted to have the same control over what was happening as I always did.
  	&lt;br&gt;&lt;br&gt;
  	So what did I do? I fought Unity as hard as I could. I realized early that I wanted a level of control over the basics of the engine that I was using, which I may not have been able to get had I used the Unity defaults.
  	&lt;br&gt;&lt;br&gt;
  	In Unity by default, there is an &#39;Update()&#39; function which gets called for each game object when there is a frame update. Unfortunately, there was no way for me to control which order the objects would be updated in. I didn&#39;t like this as there are a few cases where I want a specific game object to run its logic before, let&#39;s say, the main character. So how did I fix this? I decided to have only one game object use the &#39;Update()&#39; function and had it call a &#39;Step()&#39; function for all of the registered game objects. For anyone who has ever used Game Maker, this terminology may seem &lt;a target=&quot;_blank&quot; href=&quot;http://docs.yoyogames.com/source/dadiospice/000_using%20gamemaker/events/step%20event.html&quot;&gt;oddly familiar&lt;/a&gt;, I wonder why? By adding a priority queue for each game object type, I was able to fully predict when each object would be updated for each iteration of the main game loop.
  	&lt;br&gt;&lt;br&gt;
  	Unity is heavily used as a 3D engine because that&#39;s what it was built to be. Despite that there are a lot of people who use it to make 2D games. When I was initially looking into building a 2D game for it I had done a bunch of research looking for the most efficient/easy way to render sprite animations. The best thing which I found at that time was the &lt;a href=&quot;http://www.unikronsoftware.com/2dtoolkit/&quot; target=&quot;_blank&quot;&gt;2DToolkit&lt;/a&gt;. I&#39;m not going to go in depth with my opinions with this right now, since I don&#39;t even know whether I&#39;ll end up using it for the final game (We still haven&#39;t decided between 2D sprites or 3D models). I will say though, that while it is good, it is definitely not perfect. I&#39;ve also heard more recently that there are more alternative solutions for 2D rendering in Unity nowadays, so if your looking for something, I&#39;d say do some research first.
  	&lt;br&gt;&lt;br&gt;
  	The most important piece of my engine, which I am very happy I did not use the Unity solution for, is the physics portion. It&#39;s designed to be heavily modifiable/tweakable, and since I&#39;ve built it from scratch, there is no bloat (yet). I was able to focus on the things that I thought I needed for level design and remove the elements that I found useless. Granted, I probably could have modified the Unity physics to work the way I wanted to; but, I thought the time tradeoff for that would&#39;ve have been greater then building it from scratch on my own. Below you can see a wireframed version of our game engine. The red lines represent platforms, the cyan lines represent the mask of collision objects:
&lt;/p&gt;

&lt;div class=&quot;post-image p-end medium&quot;&gt;
	&lt;img src=&quot;http://pebblesgames.com/img/screenshot3.png&quot; alt=&quot;Wireframed fool engine&quot; /&gt;
	&lt;p&gt;Forget ignorance. Simplicity is bliss.&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
  	The biggest thing that I can take away from all this, having already made the physics engine, is the fact that it is so simple to modify now. Whereas going through Unity documentation can get to be a timesink and a hassle, I don&#39;t have to do any of that for my own code. I&#39;m the one who understands how it works and it takes me significantly less time to edit or expand because of that. Yesterday alone I added the ability to walk on slopes, something that I was avoiding because it made my past games more glitchy. Instead, it went very smoothly this time around and, while I can&#39;t call it glitch free at this point yet, I haven&#39;t found any glitches in it. So now I&#39;ve already implemented most of the basic elements that I need for the game, which means that I can spend most of my time fully focused on the level design. Personally I think this will have a positive effect on the quality of my level design in the long run.
&lt;/p&gt;
</description>
				<pubDate>Mon, 03 Nov 2014 00:00:00 -0600</pubDate>
				<link>http://pebblesgames.com/game/2014/11/03/unity-issues.html</link>
				<guid isPermaLink="true">http://pebblesgames.com/game/2014/11/03/unity-issues.html</guid>
			</item>
		
			<item>
				<title>Choosing an engine</title>
				<description>&lt;p class=&quot;p-end&quot;&gt;
  	For anyone who has put some thought into developing their own game in the past, you&#39;ve probably heard recommendations against building your own engine from scratch. Anyone who has actually gone the extra mile and did it anyways, can probably give you a few examples of why doing so was a terrible idea. While it does allow the developer some increased control on how to construct the engine, the development time trade-off is too significant to ignore.
  	&lt;br&gt;&lt;br&gt;
  	I&#39;m bringing this up because throughout university I attempted to make a game engine from scratch a few different times. Each attempt resulted in me becoming bored of the game I was trying to develop and ultimately giving up on it. I learned the hard way that trying to re-invent the wheel by making my own game engine is just draining. It doesn&#39;t matter how good the developer is, a game engine is a large product and it takes a lot of time to build.
  	&lt;br&gt;&lt;br&gt;
  	The one roadblock which I always got caught on was the construction of the level editor. I learned to make games using &lt;a target=&quot;_blank&quot; href=&quot;http://yoyogames.com/studio&quot;&gt;Game Maker&lt;/a&gt; back when it only costed $30 to get the full version. I still remember when they moved to the YoYoGames domain, I didn&#39;t realize how popular it would become at that point. What I liked about that platform was that it had a fully integrated level editor that I could use to position tiles, enemies and other pieces of the level. Everytime I got to the point where I wanted to start developing levels using the engines that I built, I realized it is much harder to do without an editor. I never learned to do level design on paper and knew making my own editor would take a significant amount of time. Unfortunately, this usually resulted in me giving up on the engine altogether.
&lt;/p&gt;

&lt;div class=&quot;post-image p-end&quot;&gt;
	&lt;img src=&quot;http://pebblesgames.com/img/game-maker-screenshot.png&quot; alt=&quot;Game Maker&quot; /&gt;
	&lt;p&gt;This brings back a lot of memories.&lt;/p&gt;
&lt;/div&gt;

&lt;p class=&quot;p-end&quot;&gt;
  When I finally made the decision to start and finish my next game, I decided that I would make use of existing tools to simplify my own development. Around that time I had read a lot of articles talking about &lt;a target=&quot;_blank&quot; href=&quot;http://unity3d.com/&quot;&gt;Unity3D&lt;/a&gt;. It sounded like exactly what I needed to streamline my development due to the support for many platforms and a built-in 3D level editor. In hindsight, I probably could have just used Game Maker again since I had already created an &lt;a target=&quot;_blank&quot; href=&quot;http://sandbox.yoyogames.com/games/174780-a_penns-platform-engine&quot;&gt;adjustable platforming engine&lt;/a&gt;, but I wanted to venture into new territory.
  &lt;br&gt;&lt;br&gt;
  Since then, I actually haven&#39;t consistently thought that Unity is the perfect solution for me. While it did offer me a simple way to build for many platforms and create levels, it also gave me loads of other features that I didn&#39;t really want. I won&#39;t go into too much detail in this post, but I spent a fair amount of time fighting against the engine which I chose to use in order to simplify my work. That being said, I did eventually grow accustomed to it and I wouldn&#39;t switch to another engine at this point. I&#39;ve learned how to build around the things that I dislike about Unity, ultimately making it what I would consider the best solution for me after all.
&lt;/p&gt;
</description>
				<pubDate>Sat, 01 Nov 2014 00:00:00 -0500</pubDate>
				<link>http://pebblesgames.com/game/2014/11/01/using-unity.html</link>
				<guid isPermaLink="true">http://pebblesgames.com/game/2014/11/01/using-unity.html</guid>
			</item>
		
			<item>
				<title>test post please ignore</title>
				<description>&lt;p class=&quot;p-end&quot;&gt;
	Let&#39;s be honest, no one ignores the test post. Unfortunately, there isn&#39;t much to show off about the game this early, or rather, there isn&#39;t much I want to show off about the game this early. So for now let&#39;s just talk about the type of game which we are trying to create.
	&lt;br&gt;&lt;br&gt;
	To simplify it in terms of genre, it will be a high speed 2D action platformer with a heavy focus on integrated storytelling. I&#39;m personally not a big fan of interrupting gameplay to present a storyline as it destroys the player&#39;s immersion. I love it when a game can properly deliver a story without having the player watch a cutscene or read text for hours on end. &lt;a target=&quot;_blank&quot; href=&quot;http://www.supergiantgames.com/games/bastion/&quot;&gt;Bastion&lt;/a&gt; achieved this with flying colors and based on the success and critical acclaim of &lt;a target=&quot;_blank&quot; href=&quot;http://www.stanleyparable.com/&quot;&gt;The Stanley Parable&lt;/a&gt;, it has become obvious that consumers enjoy this method of storytelling in video games, even if there isn&#39;t much depth to the gameplay.
&lt;/p&gt;

&lt;div class=&quot;post-image p-end small&quot;&gt;
	&lt;img src=&quot;http://pebblesgames.com/img/stanley-parable.jpg&quot; alt=&quot;Stanley Parable hallway&quot; /&gt;
	&lt;p&gt;All you do is walk and people loved it.&lt;/p&gt;
&lt;/div&gt;

&lt;p class=&quot;p-end&quot;&gt;
	If you look at my &lt;a target=&quot;_blank&quot; href=&quot;/about/&quot;&gt;previous games&lt;/a&gt;, you will notice that I have a lot of history making action platformers. I figured that there was no reason to switch to a genre which I don&#39;t have as much experience with. Instead I opted expand what is my favorite genre by experimenting with narrative instead. Expanding on our predecessors isn&#39;t exactly hard, when was the last time there was an actual story in a Mario or Rayman game? We as players always just accepted that action platformers generally don&#39;t need a storyline, or at least not a good one. This formula has been fine for a long time, but it&#39;s about time we broke out of that mold and explore what a 2d platformer could be.
	&lt;br&gt;&lt;br&gt;
	Now let me just take a break here and clarify what I mean by an action platformer, because some people may not be able to discern the difference between types of 2D platformers. In one hand you have your puzzle platformers, think &lt;a target=&quot;_blank&quot; href=&quot;http://braid-game.com/&quot;&gt;Braid&lt;/a&gt; and &lt;a target=&quot;_blank&quot; href=&quot;http://fezgame.com/&quot;&gt;Fez&lt;/a&gt;. I find that there is an oversaturation of these in the indie game market due to the fact that they are low cost to develop. While I do enjoy these games, I know I&#39;m not alone when I say I prefer a more uptempo gameplay most of the time. Which brings me to the other hand, action platformers (think Mario, DKC or Sonic). These games typically are less based on solving puzzles and more focused on using the game physics to complete levels. Unfortunately, there are not as many of these games being made in the indie world. We occasionally get games like &lt;a target=&quot;_blank&quot; href=&quot;http://yachtclubgames.com/shovel-knight/&quot;&gt;Shovel Knight&lt;/a&gt; but it seems like a genre which is mostly being supported through games by major publishers like &lt;a target=&quot;_blank&quot; href=&quot;http://newsupermariobrosu.nintendo.com/&quot;&gt;New Super Mario Bros&lt;/a&gt;, &lt;a target=&quot;_blank&quot; href=&quot;http://donkeykong.nintendo.com/tropical-freeze/&quot;&gt;Donkey Kong Country&lt;/a&gt; and &lt;a target=&quot;_blank&quot; href=&quot;http://rayman.ubi.com/legends/en-gb/home/&quot;&gt;Rayman&lt;/a&gt;.
	&lt;br&gt;&lt;br&gt;
	Based on the number of games in this genre being made, you could assume that they don&#39;t have very good sales, however its quite the opposite. All the action platformer games I just listed were critically acclaimed upon release and sold very well. Even just looking at the only indie game example I gave, Shovel Knight sold &lt;a target=&quot;_blank&quot; href=&quot;http://yachtclubgames.com/2014/08/sales-one-month/&quot;&gt;180,000&lt;/a&gt; copies in its first month available. So why aren&#39;t more of these games being made? Hell if I know, but what I do know is that I plan on making one. I started this post mentioning that I didn&#39;t really feel like showing off the game this early. Well if you&#39;ve gotten this far then i may as well leave a screenshot. Just remember that this is development artwork that you&#39;re seeing, this is a very early image of our engine.
&lt;/p&gt;

&lt;div class=&quot;post-image&quot;&gt;
	&lt;img src=&quot;http://pebblesgames.com/img/screenshot2.png&quot; alt=&quot;First image of the fool engine&quot; /&gt;
	&lt;p&gt;You saw it here first.&lt;/p&gt;
&lt;/div&gt;

&lt;!-- Sample video
&lt;div class=&quot;post-image p-end&quot;&gt;
	&lt;div class=&quot;video&quot;&gt;
		&lt;iframe width=&quot;420&quot; height=&quot;315&quot; src=&quot;//www.youtube.com/embed/GEmml37gOpg&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;
	&lt;/div&gt;
	&lt;p&gt;Stolen Youth&lt;/p&gt;
&lt;/div&gt;
--&gt;
</description>
				<pubDate>Tue, 28 Oct 2014 00:00:00 -0500</pubDate>
				<link>http://pebblesgames.com/game/2014/10/28/test-post.html</link>
				<guid isPermaLink="true">http://pebblesgames.com/game/2014/10/28/test-post.html</guid>
			</item>
		
	</channel>
</rss>